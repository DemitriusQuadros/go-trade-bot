// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	entities "go-trade-bot/app/entities"

	mock "github.com/stretchr/testify/mock"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// CreateAccount provides a mock function with given fields: account
func (_m *UseCase) CreateAccount(account entities.Account) error {
	ret := _m.Called(account)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.Account) error); ok {
		r0 = rf(account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAccount provides a mock function with no fields
func (_m *UseCase) GetAccount() (entities.Account, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAccount")
	}

	var r0 entities.Account
	var r1 error
	if rf, ok := ret.Get(0).(func() (entities.Account, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() entities.Account); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(entities.Account)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUseCase creates a new instance of UseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UseCase {
	mock := &UseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
