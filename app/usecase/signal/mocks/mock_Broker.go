// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	context "context"

	binance "github.com/adshao/go-binance/v2"

	mock "github.com/stretchr/testify/mock"
)

// Broker is an autogenerated mock type for the Broker type
type Broker struct {
	mock.Mock
}

// ListTickerPrices provides a mock function with given fields: ctx, symbol
func (_m *Broker) ListTickerPrices(ctx context.Context, symbol string) ([]*binance.SymbolPrice, error) {
	ret := _m.Called(ctx, symbol)

	if len(ret) == 0 {
		panic("no return value specified for ListTickerPrices")
	}

	var r0 []*binance.SymbolPrice
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*binance.SymbolPrice, error)); ok {
		return rf(ctx, symbol)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*binance.SymbolPrice); ok {
		r0 = rf(ctx, symbol)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*binance.SymbolPrice)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, symbol)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBroker creates a new instance of Broker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBroker(t interface {
	mock.TestingT
	Cleanup(func())
}) *Broker {
	mock := &Broker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
