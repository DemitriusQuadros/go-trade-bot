// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// AccountUseCase is an autogenerated mock type for the AccountUseCase type
type AccountUseCase struct {
	mock.Mock
}

// AddOrder provides a mock function with given fields: exitPrice
func (_m *AccountUseCase) AddOrder(exitPrice float32) error {
	ret := _m.Called(exitPrice)

	if len(ret) == 0 {
		panic("no return value specified for AddOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(float32) error); ok {
		r0 = rf(exitPrice)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CanOpenOrder provides a mock function with no fields
func (_m *AccountUseCase) CanOpenOrder() (bool, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CanOpenOrder")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func() (bool, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeductOrder provides a mock function with given fields: entryPrice
func (_m *AccountUseCase) DeductOrder(entryPrice float32) error {
	ret := _m.Called(entryPrice)

	if len(ret) == 0 {
		panic("no return value specified for DeductOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(float32) error); ok {
		r0 = rf(entryPrice)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDisponibleAmout provides a mock function with no fields
func (_m *AccountUseCase) GetDisponibleAmout() (float32, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDisponibleAmout")
	}

	var r0 float32
	var r1 error
	if rf, ok := ret.Get(0).(func() (float32, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() float32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float32)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAccountUseCase creates a new instance of AccountUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccountUseCase {
	mock := &AccountUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
