// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	entities "go-trade-bot/app/entities"

	mock "github.com/stretchr/testify/mock"
)

// SignalRepository is an autogenerated mock type for the SignalRepository type
type SignalRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: signal
func (_m *SignalRepository) Create(signal entities.Signal) error {
	ret := _m.Called(signal)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.Signal) error); ok {
		r0 = rf(signal)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with no fields
func (_m *SignalRepository) GetAll() ([]entities.Signal, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []entities.Signal
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entities.Signal, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entities.Signal); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Signal)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *SignalRepository) GetByID(id uint) (entities.Signal, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 entities.Signal
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (entities.Signal, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) entities.Signal); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entities.Signal)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOpenSignals provides a mock function with given fields: symbol, strategyId
func (_m *SignalRepository) GetOpenSignals(symbol string, strategyId uint) (entities.Signal, error) {
	ret := _m.Called(symbol, strategyId)

	if len(ret) == 0 {
		panic("no return value specified for GetOpenSignals")
	}

	var r0 entities.Signal
	var r1 error
	if rf, ok := ret.Get(0).(func(string, uint) (entities.Signal, error)); ok {
		return rf(symbol, strategyId)
	}
	if rf, ok := ret.Get(0).(func(string, uint) entities.Signal); ok {
		r0 = rf(symbol, strategyId)
	} else {
		r0 = ret.Get(0).(entities.Signal)
	}

	if rf, ok := ret.Get(1).(func(string, uint) error); ok {
		r1 = rf(symbol, strategyId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: signal
func (_m *SignalRepository) Update(signal entities.Signal) error {
	ret := _m.Called(signal)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.Signal) error); ok {
		r0 = rf(signal)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSignalRepository creates a new instance of SignalRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSignalRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *SignalRepository {
	mock := &SignalRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
