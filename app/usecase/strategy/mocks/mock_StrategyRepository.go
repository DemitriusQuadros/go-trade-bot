// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	context "context"
	entities "go-trade-bot/app/entities"

	mock "github.com/stretchr/testify/mock"
)

// StrategyRepository is an autogenerated mock type for the StrategyRepository type
type StrategyRepository struct {
	mock.Mock
}

// GetAll provides a mock function with given fields: ctx
func (_m *StrategyRepository) GetAll(ctx context.Context) ([]entities.Strategy, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []entities.Strategy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]entities.Strategy, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []entities.Strategy); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Strategy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *StrategyRepository) GetByID(ctx context.Context, id string) (entities.Strategy, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 entities.Strategy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entities.Strategy, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entities.Strategy); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entities.Strategy)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, symbol
func (_m *StrategyRepository) Save(ctx context.Context, symbol entities.Strategy) error {
	ret := _m.Called(ctx, symbol)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.Strategy) error); ok {
		r0 = rf(ctx, symbol)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStrategyRepository creates a new instance of StrategyRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStrategyRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *StrategyRepository {
	mock := &StrategyRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
