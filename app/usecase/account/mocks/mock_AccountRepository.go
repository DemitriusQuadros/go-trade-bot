// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	entities "go-trade-bot/app/entities"

	mock "github.com/stretchr/testify/mock"
)

// AccountRepository is an autogenerated mock type for the AccountRepository type
type AccountRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: account
func (_m *AccountRepository) Create(account entities.Account) error {
	ret := _m.Called(account)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.Account) error); ok {
		r0 = rf(account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAccountByID provides a mock function with given fields: id
func (_m *AccountRepository) GetAccountByID(id int64) (entities.Account, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountByID")
	}

	var r0 entities.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (entities.Account, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) entities.Account); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entities.Account)
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAccount provides a mock function with given fields: account
func (_m *AccountRepository) UpdateAccount(account entities.Account) error {
	ret := _m.Called(account)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.Account) error); ok {
		r0 = rf(account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAccountRepository creates a new instance of AccountRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccountRepository {
	mock := &AccountRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
